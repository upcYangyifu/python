#第十章 模块和客户端
#10.1模块化程序设计的概念
#10.1.1 模块化程序设计 ——把计算任务分离成不同模块
#10.1.2 模块的API（Application　Programming Interf）应用程序编程接口
# import math #用该方法在IDLE可以查看math模块
# help(math)
#10.1.3模块的实现——python内置模块使用c编写
#10.1.4 模块的客户端——导入其他模块的程序
#10.1.5模块化程序设计的优越性

#10.2 模块的设计和实现
#10.2.1 模块设计的一般原则
#10.2.2API设计
#10.2.3 创建模块——创建一个.py 文件
#10.2.4模块的私有函数使用单下划线开始函数名作为私有函数
#10.2.5 模块的测试代码——一般代码独立运行时才执行
#if __name__=='__main__' 值为True时才会运行
#10.2.6 编写模块文档字符串
#help(abs)           #这两种方法可以查看帮助信息
#print(abs.__doc__)
# """doc模块说明文档"""             #三队双引号括起来的为说明文档
# def d2b(i):
#     """函数d2b的说明文档"""
#     print(bin(i))
# class Doc:
#     """类DOC的说明文档"""
#10.2.7 按字节编译的.pyc文件

#10.3 模块的导入和使用
#10.3.1 导入模块和使用模块
#基本形式：
#import 模块名
#import 模块1,模块2,...,模块n
#import 模块名 as 模块别名
# import math
# print(math.pi)
# math.trunc(1.23)
# help(math.trunc)
#10.3.2 导入模块中的成员(不推介使用)
# from 模块名 import 成员名   #导入模块中的具体成员
#成员名                       #直接调用
# from  math import pi
# print(pi)
#10.3.3重新加载模块
# from imp import reload
# import os
# reload(os)
#10.3.4 动态带入模块
# s='os'+'.'+'path'
# _m=__import__(s)
# print(_m.curdir)

#10.4 包
#10.4.1包的概念——只要文件夹中包含特殊文件  __init__.py,解释器就将该文件夹视为包
#10.4.2 创建包——在pycharm中可以鼠标右键创建包
#10.4.3 包的导入和使用
# import 包名.模块名
# import 包名.模块名.函数名
# from 包名 import * #导入包中的所有模块

#10.5 模块的导入顺序
#10.5.1 导入模块时的搜索顺序
#当前目录->操作系统环境变量中指定的目录-->python标准库目录
#目录下文件的查找次序：
#包--扩展模块--优化模块--编译模块--python模块
#10.5.2 模块搜索路径sys.path
# import sys
# print(sys.path)
#10.5.3 dir()内置函数
# dir()   #列举当前模块的所有成员
# dir(模块名)    #列举指定模块的所有成员
# dir(类/对象)   #列举指定类的所有成员

#10.6 命名空间与名称查找顺序
#任一对象的查找顺序：局部--全局--内置
